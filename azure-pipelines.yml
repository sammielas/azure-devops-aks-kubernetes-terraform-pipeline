trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
- name: DEV_ENVIRONMENT
  value: dev
- name: QA_ENVIRONMENT
  value: qa

stages:
- stage: BuildAndValidate
  displayName: Build and Validate Terraform
  jobs:
  - job: BuildAndValidateJob
    steps:
    - task: PublishPipelineArtifact@1
      displayName: Publish Terraform Artifacts
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        artifact: 'terraform-manifests'
        publishLocation: 'pipeline'
    
    - task: TerraformInstaller@0
      displayName: Install Terraform
      inputs:
        terraformVersion: '1.5.0'
    
    # First init without backend to download providers
    - bash: |
        terraform init -backend=false -upgrade
      displayName: 'Download Providers Only'
      workingDirectory: '$(System.DefaultWorkingDirectory)'

# Then init with backend configuration
    - task: TerraformTask@5
      displayName: 'Terraform Init Backend'
      inputs:
        command: 'init'
        backendServiceArm: 'terraform-aks-azurerm-svc-con'
        backendAzureRmResourceGroupName: 'tfstate-tbc'
        backendAzureRmStorageAccountName: 'tbc9482'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'aks-base.tfstate'
        commandOptions: '-reconfigure'  # No upgrade needed since providers are already downloaded 
    


    - task: TerraformTask@0
      displayName: Terraform Validate
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform-manifests'

          
    - task: PublishBuildArtifacts@1
      displayName: Publish Build Artifacts
      inputs:
        PathtoPublish: '$(System.DefaultWorkingDirectory)/terraform-manifests'
        ArtifactName: 'terraform-code'
        publishLocation: 'Container'

